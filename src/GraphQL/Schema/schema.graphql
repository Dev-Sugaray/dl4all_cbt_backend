# GraphQL Schema for CBT Platform

# Scalar Types
scalar DateTime
scalar JSON

# Enums
enum UserRole {
  student
  administrator
  content_creator
}

enum Gender {
  male
  female
  other
}

enum QuestionType {
  multiple_choice
  true_false
  fill_in_the_blanks
}

enum DifficultyLevel {
  easy
  medium
  hard
}

enum SessionType {
  practice
  exam
}

# Input Types
input LoginInput {
  email: String!
  password: String!
}

input RegisterInput {
  email: String!
  password: String!
  fullName: String!
  userRole: UserRole!
  dateOfBirth: String
  gender: Gender
  institution: String
  studyLevel: String
  preferredExamTypes: [String!]
}

input CreateExamInput {
  examName: String!
  examAbbreviation: String!
  description: String
  isActive: Boolean
}

input UpdateExamInput {
  examId: ID!
  examName: String
  examAbbreviation: String
  description: String
  isActive: Boolean
}

input CreateSubjectInput {
  subjectName: String!
  subjectCode: String
  description: String
}

input UpdateSubjectInput {
  subjectId: ID!
  subjectName: String
  subjectCode: String
  description: String
}

input CreateExamSubjectInput {
  examId: ID!
  subjectId: ID!
  numberOfQuestions: Int!
  timeLimitSeconds: Int!
  scoringScheme: String
}

input UpdateExamSubjectInput {
  examSubjectId: ID!
  numberOfQuestions: Int
  timeLimitSeconds: Int
  scoringScheme: String
}

input CreateTopicInput {
  subjectId: ID!
  topicName: String!
  description: String
}

input UpdateTopicInput {
  topicId: ID!
  topicName: String
  description: String
}

input QuestionOptionInput {
  optionLetter: String!
  optionText: String!
  isCorrect: Boolean!
}

input CreateQuestionInput {
  examSubjectId: ID!
  topicId: ID!
  questionText: String!
  questionType: QuestionType!
  correctAnswer: String!
  explanation: String
  difficultyLevel: DifficultyLevel
  options: [QuestionOptionInput!]
}

input UpdateQuestionInput {
  questionId: ID!
  questionText: String
  correctAnswer: String
  explanation: String
  difficultyLevel: DifficultyLevel
  options: [QuestionOptionInput!]
}

input StartSessionInput {
  examSubjectId: ID!
  sessionType: SessionType!
  settings: JSON
}

input SubmitAnswerInput {
  sessionId: ID!
  questionId: ID!
  submittedAnswer: String!
  timeTakenSeconds: Int
}

# Object Types
type User {
  userId: ID!
  userRole: UserRole!
  registrationTimestamp: DateTime!
  lastLogin: DateTime
  email: String!
  isActive: Boolean!
  fullName: String
  dateOfBirth: String
  gender: Gender
  institution: String
  studyLevel: String
  preferredExamTypes: [String!]
  adminName: String
  permissions: String
  creatorName: String
  expertiseArea: String
  creationCredentials: String
  profilePictureUrl: String
}

type Exam {
  examId: ID!
  examName: String!
  examAbbreviation: String!
  description: String
  isActive: Boolean!
  creationDate: DateTime!
  subjects: [ExamSubject!]!
}

type Subject {
  subjectId: ID!
  subjectName: String!
  subjectCode: String
  description: String
  topics: [Topic!]!
  exams: [ExamSubject!]!
}

type ExamSubject {
  examSubjectId: ID!
  exam: Exam!
  subject: Subject!
  numberOfQuestions: Int!
  timeLimitSeconds: Int!
  scoringScheme: String
  questions: [Question!]!
}

type Topic {
  topicId: ID!
  subject: Subject!
  topicName: String!
  description: String
  questions: [Question!]!
}

type Question {
  questionId: ID!
  examSubject: ExamSubject!
  topic: Topic!
  questionText: String!
  questionType: QuestionType!
  correctAnswer: String!
  explanation: String
  difficultyLevel: DifficultyLevel
  creationDate: DateTime!
  createdByUser: User!
  lastModifiedDate: DateTime!
  options: [QuestionOption!]!
}

type QuestionOption {
  optionId: ID!
  question: Question!
  optionLetter: String!
  optionText: String!
  isCorrect: Boolean!
}

type StudentSession {
  sessionId: ID!
  user: User!
  examSubject: ExamSubject!
  startTime: DateTime!
  endTime: DateTime
  totalQuestions: Int!
  timeAllocatedSeconds: Int
  sessionType: SessionType!
  settings: JSON
  answers: [StudentAnswer!]!
  progress: Float!
  remainingTimeSeconds: Int
}

type StudentAnswer {
  answerId: ID!
  session: StudentSession!
  question: Question!
  submittedAnswer: String
  isCorrect: Boolean
  submissionTime: DateTime!
  timeTakenSeconds: Int
}

type AuthPayload {
  token: String!
  refreshToken: String!
  user: User!
}

type PasswordResetPayload {
  success: Boolean!
  message: String!
}

type SessionStats {
  totalQuestions: Int!
  answeredQuestions: Int!
  correctAnswers: Int!
  incorrectAnswers: Int!
  score: Float!
  timeTaken: Int!
}

# Root Types
type Query {
  # User Queries
  me: User
  user(userId: ID!): User
  users(limit: Int, offset: Int): [User!]!
  
  # Exam Queries
  exam(examId: ID!): Exam
  exams(limit: Int, offset: Int, isActive: Boolean): [Exam!]!
  
  # Subject Queries
  subject(subjectId: ID!): Subject
  subjects(limit: Int, offset: Int): [Subject!]!
  
  # ExamSubject Queries
  examSubject(examSubjectId: ID!): ExamSubject
  examSubjectsByExam(examId: ID!): [ExamSubject!]!
  examSubjectsBySubject(subjectId: ID!): [ExamSubject!]!
  
  # Topic Queries
  topic(topicId: ID!): Topic
  topicsBySubject(subjectId: ID!): [Topic!]!
  
  # Question Queries
  question(questionId: ID!): Question
  questionsByExamSubject(examSubjectId: ID!, limit: Int, offset: Int): [Question!]!
  questionsByTopic(topicId: ID!, limit: Int, offset: Int): [Question!]!
  searchQuestions(query: String!, limit: Int, offset: Int): [Question!]!
  
  # Session Queries
  session(sessionId: ID!): StudentSession
  mySessions(limit: Int, offset: Int): [StudentSession!]!
  activeSession: StudentSession
  
  # Results Queries
  sessionStats(sessionId: ID!): SessionStats!
  userPerformance(userId: ID!, examId: ID): [SessionStats!]!
}

type Mutation {
  # Authentication Mutations
  login(input: LoginInput!): AuthPayload!
  register(input: RegisterInput!): AuthPayload!
  refreshToken(refreshToken: String!): AuthPayload!
  requestPasswordReset(email: String!): PasswordResetPayload!
  resetPassword(token: String!, newPassword: String!): PasswordResetPayload!
  
  # User Mutations
  updateUserProfile(userId: ID!, fullName: String, dateOfBirth: String, gender: Gender, institution: String, studyLevel: String, preferredExamTypes: [String!]): User!
  updateUserStatus(userId: ID!, isActive: Boolean!): User!
  
  # Exam Mutations
  createExam(input: CreateExamInput!): Exam!
  updateExam(input: UpdateExamInput!): Exam!
  deleteExam(examId: ID!): Boolean!
  
  # Subject Mutations
  createSubject(input: CreateSubjectInput!): Subject!
  updateSubject(input: UpdateSubjectInput!): Subject!
  deleteSubject(subjectId: ID!): Boolean!
  
  # ExamSubject Mutations
  createExamSubject(input: CreateExamSubjectInput!): ExamSubject!
  updateExamSubject(input: UpdateExamSubjectInput!): ExamSubject!
  deleteExamSubject(examSubjectId: ID!): Boolean!
  
  # Topic Mutations
  createTopic(input: CreateTopicInput!): Topic!
  updateTopic(input: UpdateTopicInput!): Topic!
  deleteTopic(topicId: ID!): Boolean!
  
  # Question Mutations
  createQuestion(input: CreateQuestionInput!): Question!
  updateQuestion(input: UpdateQuestionInput!): Question!
  deleteQuestion(questionId: ID!): Boolean!
  
  # Session Mutations
  startSession(input: StartSessionInput!): StudentSession!
  endSession(sessionId: ID!): StudentSession!
  submitAnswer(input: SubmitAnswerInput!): StudentAnswer!
}